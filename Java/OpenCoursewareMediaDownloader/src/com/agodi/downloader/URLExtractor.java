package com.agodi.downloader;

import com.agodi.helper.Lecture;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO: Insert description here. (generated by arturogomez)
 */
public class URLExtractor {
  
  public static List<String> extractLecturesUrls(Document coursePage) throws IOException {
    Element lecturesLink = coursePage.getElementsContainingOwnText("Lecture Videos").first();
    
    Document lecturesPage = Jsoup.connect(lecturesLink.absUrl("href")).get();
    Elements lecturesListing = lecturesPage.getElementsByClass("medialisting");
    
    List<String> urls = new ArrayList<String>();
    for (Element lecture : lecturesListing) {
      
      String url = lecture.child(0).absUrl("href");

      urls.add(url);
    }

    return urls;
  }

  
  public static List<Lecture> getLecturesFromUrls(List<String> urls) throws IOException {
    List<Lecture> lectures = new ArrayList<Lecture>();
    for (String url : urls) {
      Document doc = Jsoup.connect(url).get();
      
      String title = doc.getElementById("parent-fieldname-title").ownText();
      Element downloadLink = doc.getElementsContainingOwnText("Internet Archive").first();
      String videoUrl = downloadLink.absUrl("href");
      
      Lecture lecture = new Lecture(title, videoUrl);
      lectures.add(lecture);
    }

    return lectures;
  }

  
  public static void downloadVideo(String filePath, Lecture lecture) throws MalformedURLException, IOException {
    String title = lecture.getTitle(); 
    String videoUrl = lecture.getVideoUrl();
    StringBuilder fileName = new StringBuilder(filePath)
        .append(title.substring(0, title.indexOf(":")))
        .append(videoUrl.substring(videoUrl.lastIndexOf(".")));
    
    File file = new File(fileName.toString());
    if(file.exists()) { return; }
    
    URL url = new URL(lecture.getVideoUrl());
    URLConnection connection = url.openConnection();
    System.out.println(url.openConnection().getContentLength());
    
    BufferedInputStream bis =  new BufferedInputStream(connection.getInputStream());
    FileOutputStream fos =  new FileOutputStream(file);
    
    final byte data[] = new byte[1024];
    int count;
    
    try {
      while ((count = bis.read(data, 0, 1024)) != -1) {
        fos.write(data, 0, count);
      }
      fos.flush();
    } catch (IOException iox) {
      // TODO
    } finally {
      try {
        bis.close();
        fos.close();
      } catch (IOException iox) {
        // Big fat error
      }
    }
    System.out.println(file.length()); 
    
  }

  public static void downloadLecturesVideos(List<Lecture> lectures, String filePath, String courseName) throws MalformedURLException, IOException {
    StringBuilder folderName = new StringBuilder(filePath)
        .append(courseName)
        .append(File.separator);
    
    File folder = new File(folderName.toString());
    if (!folder.exists()) {
      folder.mkdir();
    }
    
    for (Lecture lecture : lectures) {
      downloadVideo(folderName.toString(), lecture);
    }

  }

  public static String getCourseName(Document coursePage) {
    Elements elements = coursePage.getElementsByClass("title");
    return elements.first().ownText();
  }

  public static void main(String args[]) {
    try {
      Document coursePage = Jsoup.connect("http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/").get();
      String courseName = getCourseName(coursePage);
      List<String> urls = extractLecturesUrls(coursePage);
      List<Lecture> lectures = getLecturesFromUrls(urls);
      downloadLecturesVideos(lectures, "/usr/local/google/home/arturogomez/", courseName);
    } catch (IOException e) {
      // TODO(arturogomez): Auto-generated catch block
      e.printStackTrace();
    }
  }

}

